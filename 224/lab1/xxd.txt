00000000: 00100011 01101001 01101110 01100011 01101100 01110101  #inclu
00000006: 01100100 01100101 00100000 00111100 01110011 01110100  de <st
0000000c: 01100100 01101001 01101111 00101110 01101000 00111110  dio.h>
00000012: 00001010 00100011 01101001 01101110 01100011 01101100  .#incl
00000018: 01110101 01100100 01100101 00100000 00111100 01110011  ude <s
0000001e: 01110100 01100100 01101100 01101001 01100010 00101110  tdlib.
00000024: 01101000 00111110 00001010 00100011 01101001 01101110  h>.#in
0000002a: 01100011 01101100 01110101 01100100 01100101 00100000  clude 
00000030: 00111100 01110011 01110100 01110010 01101001 01101110  <strin
00000036: 01100111 00101110 01101000 00111110 00001010 00001010  g.h>..
0000003c: 00100011 01100100 01100101 01100110 01101001 01101110  #defin
00000042: 01100101 00100000 01010100 01010010 01010101 01000101  e TRUE
00000048: 00100000 00110001 00001010 00100011 01100100 01100101   1.#de
0000004e: 01100110 01101001 01101110 01100101 00100000 01000110  fine F
00000054: 01000001 01001100 01010011 01000101 00100000 00110000  ALSE 0
0000005a: 00001010 00100011 01100100 01100101 01100110 01101001  .#defi
00000060: 01101110 01100101 00100000 01000010 01000001 01000100  ne BAD
00000066: 01011111 01001110 01010101 01001101 01000010 01000101  _NUMBE
0000006c: 01010010 01011111 01000001 01010010 01000111 01010011  R_ARGS
00000072: 00100000 00110001 00001010 00001010 00101111 00101010   1../*
00000078: 00101010 00001010 00100000 00101010 00100000 01010000  *. * P
0000007e: 01100001 01110010 01110011 01100101 01110011 00100000  arses 
00000084: 01110100 01101000 01100101 00100000 01100011 01101111  the co
0000008a: 01101101 01101101 01100001 01101110 01100100 00100000  mmand 
00000090: 01101100 01101001 01101110 01100101 00101110 00001010  line..
00000096: 00100000 00101010 00001010 00100000 00101010 00100000   *. * 
0000009c: 01100001 01110010 01100111 01100011 00111010 00100000  argc: 
000000a2: 01110100 01101000 01100101 00100000 01101110 01110101  the nu
000000a8: 01101101 01100010 01100101 01110010 00100000 01101111  mber o
000000ae: 01100110 00100000 01101001 01110100 01100101 01101101  f item
000000b4: 01110011 00100000 01101111 01101110 00100000 01110100  s on t
000000ba: 01101000 01100101 00100000 01100011 01101111 01101101  he com
000000c0: 01101101 01100001 01101110 01100100 00100000 01101100  mand l
000000c6: 01101001 01101110 01100101 00100000 00101000 01100001  ine (a
000000cc: 01101110 01100100 00100000 01101100 01100101 01101110  nd len
000000d2: 01100111 01110100 01101000 00100000 01101111 01100110  gth of
000000d8: 00100000 01110100 01101000 01100101 00001010 00100000   the. 
000000de: 00101010 00100000 00100000 00100000 00100000 00100000  *     
000000e4: 00100000 00100000 01100001 01110010 01100111 01110110    argv
000000ea: 00100000 01100001 01110010 01110010 01100001 01111001   array
000000f0: 00101001 00100000 01101001 01101110 01100011 01101100  ) incl
000000f6: 01110101 01100100 01101001 01101110 01100111 00100000  uding 
000000fc: 01110100 01101000 01100101 00100000 01100101 01111000  the ex
00000102: 01100101 01100011 01110101 01110100 01100001 01100010  ecutab
00000108: 01101100 01100101 00001010 00100000 00101010 00100000  le. * 
0000010e: 01100001 01110010 01100111 01110110 00111010 00100000  argv: 
00000114: 01110100 01101000 01100101 00100000 01100001 01110010  the ar
0000011a: 01110010 01100001 01111001 00100000 01101111 01100110  ray of
00000120: 00100000 01100001 01110010 01100111 01110101 01101101   argum
00000126: 01100101 01101110 01110100 01110011 00100000 01100001  ents a
0000012c: 01110011 00100000 01110011 01110100 01110010 01101001  s stri
00000132: 01101110 01100111 01110011 00100000 00101000 01100011  ngs (c
00000138: 01101000 01100001 01110010 00101010 00100000 01100001  har* a
0000013e: 01110010 01110010 01100001 01111001 00101001 00001010  rray).
00000144: 00100000 00101010 00100000 01100010 01101001 01110100   * bit
0000014a: 01110011 00111010 00100000 01110100 01101000 01100101  s: the
00000150: 00100000 01101001 01101110 01110100 01100101 01100111   integ
00000156: 01100101 01110010 00100000 01110110 01100001 01101100  er val
0000015c: 01110101 01100101 00100000 01101001 01110011 00100000  ue is 
00000162: 01110011 01100101 01110100 00100000 01110100 01101111  set to
00000168: 00100000 01010100 01010010 01010101 01000101 00100000   TRUE 
0000016e: 01101001 01100110 00100000 01100010 01101001 01110100  if bit
00000174: 01110011 00100000 01101111 01110101 01110100 01110000  s outp
0000017a: 01110101 01110100 00100000 01101001 01101110 01100100  ut ind
00000180: 01101001 01100011 01100001 01110100 01100101 01100100  icated
00000186: 00001010 00100000 00101010 00100000 00100000 00100000  . *   
0000018c: 00100000 00100000 00100000 00100000 01101111 01110101      ou
00000192: 01110100 01101000 01100101 01110010 01110111 01101001  therwi
00000198: 01110011 01100101 00100000 01000110 01000001 01001100  se FAL
0000019e: 01010011 01000101 00100000 01100110 01101111 01110010  SE for
000001a4: 00100000 01101000 01100101 01111000 00100000 01101111   hex o
000001aa: 01110101 01110100 01110000 01110101 01110100 00001010  utput.
000001b0: 00100000 00101010 00001010 00100000 00101010 00100000   *. * 
000001b6: 01110010 01100101 01110100 01110101 01110010 01101110  return
000001bc: 01110011 00100000 01110100 01101000 01100101 00100000  s the 
000001c2: 01101001 01101110 01110000 01110101 01110100 00100000  input 
000001c8: 01100110 01101001 01101100 01100101 00100000 01110000  file p
000001ce: 01101111 01101001 01101110 01110100 01100101 01110010  ointer
000001d4: 00100000 00101000 01000110 01001001 01001100 01000101   (FILE
000001da: 00101010 00101001 00001010 00100000 00101010 00101010  *). **
000001e0: 00101111 00001010 01000110 01001001 01001100 01000101  /.FILE
000001e6: 00100000 00101010 01110000 01100001 01110010 01110011   *pars
000001ec: 01100101 01000011 01101111 01101101 01101101 01100001  eComma
000001f2: 01101110 01100100 01001100 01101001 01101110 01100101  ndLine
000001f8: 00101000 01101001 01101110 01110100 00100000 01100001  (int a
000001fe: 01110010 01100111 01100011 00101100 00100000 01100011  rgc, c
00000204: 01101000 01100001 01110010 00100000 00101010 00101010  har **
0000020a: 01100001 01110010 01100111 01110110 00101100 00100000  argv, 
00000210: 01101001 01101110 01110100 00100000 00101010 01100010  int *b
00000216: 01101001 01110100 01110011 00101001 00001010 01111011  its).{
0000021c: 00001010 00100000 00100000 01101001 01100110 00100000  .  if 
00000222: 00101000 01100001 01110010 01100111 01100011 00100000  (argc 
00000228: 00111110 00100000 00110010 00101001 00001010 00100000  > 2). 
0000022e: 00100000 01111011 00001010 00100000 00100000 00100000   {.   
00000234: 00100000 01110000 01110010 01101001 01101110 01110100   print
0000023a: 01100110 00101000 00100010 01010101 01110011 01100001  f("Usa
00000240: 01100111 01100101 00111010 00100000 00100101 01110011  ge: %s
00000246: 00100000 01011011 00101101 01100010 01111100 00101101   [-b|-
0000024c: 01100010 01101001 01110100 01110011 01011101 01011100  bits]\
00000252: 01101110 00100010 00101100 00100000 01100001 01110010  n", ar
00000258: 01100111 01110110 01011011 00110000 01011101 00101001  gv[0])
0000025e: 00111011 00001010 00100000 00100000 00100000 00100000  ;.    
00000264: 01100101 01111000 01101001 01110100 00101000 01000010  exit(B
0000026a: 01000001 01000100 01011111 01001110 01010101 01001101  AD_NUM
00000270: 01000010 01000101 01010010 01011111 01000001 01010010  BER_AR
00000276: 01000111 01010011 00101001 00111011 00001010 00100000  GS);. 
0000027c: 00100000 01111101 00001010 00001010 00100000 00100000   }..  
00000282: 01101001 01100110 00100000 00101000 01100001 01110010  if (ar
00000288: 01100111 01100011 00100000 00111101 00111101 00100000  gc == 
0000028e: 00110010 00100000 00100110 00100110 00001010 00100000  2 &&. 
00000294: 00100000 00100000 00100000 00100000 00100000 00101000       (
0000029a: 01110011 01110100 01110010 01100011 01101101 01110000  strcmp
000002a0: 00101000 01100001 01110010 01100111 01110110 01011011  (argv[
000002a6: 00110001 01011101 00101100 00100000 00100010 00101101  1], "-
000002ac: 01100010 00100010 00101001 00100000 00111101 00111101  b") ==
000002b2: 00100000 00110000 00100000 01111100 01111100 00100000   0 || 
000002b8: 01110011 01110100 01110010 01100011 01101101 01110000  strcmp
000002be: 00101000 01100001 01110010 01100111 01110110 01011011  (argv[
000002c4: 00110001 01011101 00101100 00100000 00100010 00101101  1], "-
000002ca: 01100010 01101001 01110100 01110011 00100010 00101001  bits")
000002d0: 00100000 00111101 00111101 00100000 00110000 00101001   == 0)
000002d6: 00101001 00001010 00100000 00100000 01111011 00001010  ).  {.
000002dc: 00100000 00100000 00100000 00100000 00101010 01100010      *b
000002e2: 01101001 01110100 01110011 00100000 00111101 00100000  its = 
000002e8: 01010100 01010010 01010101 01000101 00111011 00001010  TRUE;.
000002ee: 00100000 00100000 01111101 00001010 00100000 00100000    }.  
000002f4: 01100101 01101100 01110011 01100101 00001010 00100000  else. 
000002fa: 00100000 01111011 00001010 00100000 00100000 00100000   {.   
00000300: 00100000 00101010 01100010 01101001 01110100 01110011   *bits
00000306: 00100000 00111101 00100000 01000110 01000001 01001100   = FAL
0000030c: 01010011 01000101 00111011 00001010 00100000 00100000  SE;.  
00000312: 01111101 00001010 00001010 00100000 00100000 01110010  }..  r
00000318: 01100101 01110100 01110101 01110010 01101110 00100000  eturn 
0000031e: 01110011 01110100 01100100 01101001 01101110 00111011  stdin;
00000324: 00001010 01111101 00001010 00001010 00101111 00101010  .}../*
0000032a: 00101010 00001010 00100000 00101010 00100000 01010111  *. * W
00000330: 01110010 01101001 01110100 01100101 01110011 00100000  rites 
00000336: 01100100 01100001 01110100 01100001 00100000 01110100  data t
0000033c: 01101111 00100000 01110011 01110100 01100100 01101111  o stdo
00000342: 01110101 01110100 00100000 01101001 01101110 00100000  ut in 
00000348: 01101000 01100101 01111000 01100001 01100100 01100101  hexade
0000034e: 01100011 01101001 01101101 01100001 01101100 00101110  cimal.
00000354: 00001010 00100000 00101010 00001010 00100000 00101010  . *. *
0000035a: 00100000 01010011 01100101 01100101 00100000 01101101   See m
00000360: 01111001 01111000 01111000 01100100 00101110 01101101  yxxd.m
00000366: 01100100 00100000 01100110 01101111 01110010 00100000  d for 
0000036c: 01100100 01100101 01110100 01100001 01101001 01101100  detail
00000372: 01110011 00101110 00001010 00100000 00101010 00001010  s.. *.
00000378: 00100000 00101010 00100000 01100100 01100001 01110100   * dat
0000037e: 01100001 00111010 00100000 01100001 01101110 00100000  a: an 
00000384: 01100001 01110010 01110010 01100001 01111001 00100000  array 
0000038a: 01101111 01100110 00100000 01101110 01101111 00100000  of no 
00000390: 01101101 01101111 01110010 01100101 00100000 01110100  more t
00000396: 01101000 01100001 01101110 00100000 00110001 00110110  han 16
0000039c: 00100000 01100011 01101000 01100001 01110010 01100001   chara
000003a2: 01100011 01110100 01100101 01110010 01110011 00001010  cters.
000003a8: 00100000 00101010 00100000 01110011 01101001 01111010   * siz
000003ae: 01100101 00111010 00100000 01110100 01101000 01100101  e: the
000003b4: 00100000 01110011 01101001 01111010 01100101 00100000   size 
000003ba: 01101111 01100110 00100000 01110100 01101000 01100101  of the
000003c0: 00100000 01100001 01110010 01110010 01100001 01111001   array
000003c6: 00001010 00100000 00101010 00101010 00101111 00001010  . **/.
000003cc: 01110110 01101111 01101001 01100100 00100000 01110000  void p
000003d2: 01110010 01101001 01101110 01110100 01000100 01100001  rintDa
000003d8: 01110100 01100001 01000001 01110011 01001000 01100101  taAsHe
000003de: 01111000 00101000 01110101 01101110 01110011 01101001  x(unsi
000003e4: 01100111 01101110 01100101 01100100 00100000 01100011  gned c
000003ea: 01101000 01100001 01110010 00100000 00101010 01100100  har *d
000003f0: 01100001 01110100 01100001 00101100 00100000 01110011  ata, s
000003f6: 01101001 01111010 01100101 01011111 01110100 00100000  ize_t 
000003fc: 01110011 01101001 01111010 01100101 00101001 00001010  size).
00000402: 01111011 00001010 00100000 00100000 01100011 01101111  {.  co
00000408: 01101110 01110011 01110100 00100000 01101001 01101110  nst in
0000040e: 01110100 00100000 01000010 01001001 01010100 01011111  t BIT_
00000414: 01000011 01001111 01010101 01001110 01010100 00100000  COUNT 
0000041a: 00111101 00100000 00110001 00110110 00111011 00001010  = 16;.
00000420: 00100000 00100000 01100011 01101111 01101110 01110011    cons
00000426: 01110100 00100000 01101001 01101110 01110100 00100000  t int 
0000042c: 01001101 01001001 01010011 01010011 01001001 01001110  MISSIN
00000432: 01000111 01011111 01000010 01001001 01010100 01010011  G_BITS
00000438: 00100000 00111101 00100000 01000010 01001001 01010100   = BIT
0000043e: 01011111 01000011 01001111 01010101 01001110 01010100  _COUNT
00000444: 00100000 00101101 00100000 01110011 01101001 01111010   - siz
0000044a: 01100101 00111011 00001010 00100000 00100000 01100011  e;.  c
00000450: 01101111 01101110 01110011 01110100 00100000 01101001  onst i
00000456: 01101110 01110100 00100000 01010011 01010000 01000001  nt SPA
0000045c: 01000011 01000101 01011111 01010000 01000101 01010010  CE_PER
00000462: 01011111 01000010 01011001 01010100 01000101 00100000  _BYTE 
00000468: 00111101 00100000 00110001 00111011 00001010 00001010  = 1;..
0000046e: 00100000 00100000 00101111 00101111 00100000 01010000    // P
00000474: 01110010 01101001 01101110 01110100 00100000 01100100  rint d
0000047a: 01100001 01110100 01100001 00101100 00100000 01110011  ata, s
00000480: 01110000 01100001 01100011 01101001 01101110 01100111  pacing
00000486: 00100000 01100101 01110110 01100101 01110010 01111001   every
0000048c: 00100000 00110010 00100000 01100010 01111001 01110100   2 byt
00000492: 01100101 01110011 00001010 00100000 00100000 01100110  es.  f
00000498: 01101111 01110010 00100000 00101000 01101001 01101110  or (in
0000049e: 01110100 00100000 01101001 00100000 00111101 00100000  t i = 
000004a4: 00110000 00111011 00100000 01101001 00100000 00111100  0; i <
000004aa: 00100000 01110011 01101001 01111010 01100101 00111011   size;
000004b0: 00100000 01101001 00101011 00101011 00101001 00001010   i++).
000004b6: 00100000 00100000 01111011 00001010 00100000 00100000    {.  
000004bc: 00100000 00100000 01101001 01100110 00100000 00101000    if (
000004c2: 01101001 00100000 00100101 00100000 00110010 00100000  i % 2 
000004c8: 00111101 00111101 00100000 00110000 00101001 00001010  == 0).
000004ce: 00100000 00100000 00100000 00100000 01111011 00001010      {.
000004d4: 00100000 00100000 00100000 00100000 00100000 00100000        
000004da: 01110000 01110010 01101001 01101110 01110100 01100110  printf
000004e0: 00101000 00100010 00100000 00100010 00101001 00111011  (" ");
000004e6: 00001010 00100000 00100000 00100000 00100000 01111101  .    }
000004ec: 00001010 00100000 00100000 00100000 00100000 01110000  .    p
000004f2: 01110010 01101001 01101110 01110100 01100110 00101000  rintf(
000004f8: 00100010 00100101 01111000 00100010 00101100 00100000  "%x", 
000004fe: 01100100 01100001 01110100 01100001 01011011 01101001  data[i
00000504: 01011101 00101001 00111011 00001010 00100000 00100000  ]);.  
0000050a: 01111101 00001010 00001010 00100000 00100000 00101111  }..  /
00000510: 00101111 00100000 01010000 01110010 01101001 01101110  / Prin
00000516: 01110100 00100000 01110100 01110010 01100001 01101001  t trai
0000051c: 01101100 01101001 01101110 01100111 00100000 01110011  ling s
00000522: 01110000 01100001 01100011 01100101 00100000 01101111  pace o
00000528: 01101110 00100000 01101100 01100001 01110011 01110100  n last
0000052e: 00100000 01101100 01101001 01101110 01100101 00001010   line.
00000534: 00100000 00100000 01101001 01100110 00100000 00101000    if (
0000053a: 01001101 01001001 01010011 01010011 01001001 01001110  MISSIN
00000540: 01000111 01011111 01000010 01001001 01010100 01010011  G_BITS
00000546: 00100000 00100001 00111101 00100000 00110000 00101001   != 0)
0000054c: 00001010 00100000 00100000 01111011 00001010 00100000  .  {. 
00000552: 00100000 00100000 00100000 01100110 01101111 01110010     for
00000558: 00100000 00101000 01101001 01101110 01110100 00100000   (int 
0000055e: 01101001 00100000 00111101 00100000 00110000 00111011  i = 0;
00000564: 00100000 01101001 00100000 00111100 00100000 00101000   i < (
0000056a: 00101000 01001101 01001001 01010011 01010011 01001001  (MISSI
00000570: 01001110 01000111 01011111 01000010 01001001 01010100  NG_BIT
00000576: 01010011 00100000 00101011 00100000 01010011 01010000  S + SP
0000057c: 01000001 01000011 01000101 01011111 01010000 01000101  ACE_PE
00000582: 01010010 01011111 01000010 01011001 01010100 01000101  R_BYTE
00000588: 00101001 00100000 00101010 00100000 00110010 00101001  ) * 2)
0000058e: 00111011 00100000 01101001 00101011 00101011 00101001  ; i++)
00000594: 00001010 00100000 00100000 00100000 00100000 01111011  .    {
0000059a: 00001010 00100000 00100000 00100000 00100000 00100000  .     
000005a0: 00100000 01110000 01110010 01101001 01101110 01110100   print
000005a6: 01100110 00101000 00100010 00100000 00100010 00101001  f(" ")
000005ac: 00111011 00001010 00100000 00100000 00100000 00100000  ;.    
000005b2: 01111101 00001010 00100000 00100000 01111101 00001010  }.  }.
000005b8: 01111101 00001010 00001010 00101111 00101010 00101010  }../**
000005be: 00001010 00100000 00101010 00100000 01010111 01110010  . * Wr
000005c4: 01101001 01110100 01100101 01110011 00100000 01100100  ites d
000005ca: 01100001 01110100 01100001 00100000 01110100 01101111  ata to
000005d0: 00100000 01110011 01110100 01100100 01101111 01110101   stdou
000005d6: 01110100 00100000 01101001 01101110 00100000 01101000  t in h
000005dc: 01100101 01111000 01100001 01100100 01100101 01100011  exadec
000005e2: 01101001 01101101 01100001 01101100 00101110 00001010  imal..
000005e8: 00100000 00101010 00001010 00100000 00101010 00100000   *. * 
000005ee: 01010011 01100101 01100101 00100000 01101101 01111001  See my
000005f4: 01111000 01111000 01100100 00101110 01101101 01100100  xxd.md
000005fa: 00100000 01100110 01101111 01110010 00100000 01100100   for d
00000600: 01100101 01110100 01100001 01101001 01101100 01110011  etails
00000606: 00101110 00001010 00100000 00101010 00001010 00100000  .. *. 
0000060c: 00101010 00100000 01100100 01100001 01110100 01100001  * data
00000612: 00111010 00100000 01100001 01101110 00100000 01100001  : an a
00000618: 01110010 01110010 01100001 01111001 00100000 01101111  rray o
0000061e: 01100110 00100000 01101110 01101111 00100000 01101101  f no m
00000624: 01101111 01110010 01100101 00100000 01110100 01101000  ore th
0000062a: 01100001 01101110 00100000 00110001 00110110 00100000  an 16 
00000630: 01100011 01101000 01100001 01110010 01100001 01100011  charac
00000636: 01110100 01100101 01110010 01110011 00001010 00100000  ters. 
0000063c: 00101010 00100000 01110011 01101001 01111010 01100101  * size
00000642: 00111010 00100000 01110100 01101000 01100101 00100000  : the 
00000648: 01110011 01101001 01111010 01100101 00100000 01101111  size o
0000064e: 01100110 00100000 01110100 01101000 01100101 00100000  f the 
00000654: 01100001 01110010 01110010 01100001 01111001 00001010  array.
0000065a: 00100000 00101010 00101010 00101111 00001010 01110110   **/.v
00000660: 01101111 01101001 01100100 00100000 01110000 01110010  oid pr
00000666: 01101001 01101110 01110100 01000100 01100001 01110100  intDat
0000066c: 01100001 01000001 01110011 01000010 01101001 01110100  aAsBit
00000672: 01110011 00101000 01110101 01101110 01110011 01101001  s(unsi
00000678: 01100111 01101110 01100101 01100100 00100000 01100011  gned c
0000067e: 01101000 01100001 01110010 00100000 00101010 01100100  har *d
00000684: 01100001 01110100 01100001 00101100 00100000 01110011  ata, s
0000068a: 01101001 01111010 01100101 01011111 01110100 00100000  ize_t 
00000690: 01110011 01101001 01111010 01100101 00101001 00001010  size).
00000696: 01111011 00001010 00100000 00100000 01100011 01101111  {.  co
0000069c: 01101110 01110011 01110100 00100000 01101001 01101110  nst in
000006a2: 01110100 00100000 01000010 01001001 01010100 01011111  t BIT_
000006a8: 01000011 01001111 01010101 01001110 01010100 00100000  COUNT 
000006ae: 00111101 00100000 00110001 00110110 00111011 00001010  = 16;.
000006b4: 00100000 00100000 01100011 01101111 01101110 01110011    cons
000006ba: 01110100 00100000 01101001 01101110 01110100 00100000  t int 
000006c0: 01001101 01001001 01010011 01010011 01001001 01001110  MISSIN
000006c6: 01000111 01011111 01000010 01001001 01010100 01010011  G_BITS
000006cc: 00100000 00111101 00100000 01000010 01001001 01010100   = BIT
000006d2: 01011111 01000011 01001111 01010101 01001110 01010100  _COUNT
000006d8: 00100000 00101101 00100000 01110011 01101001 01111010   - siz
000006de: 01100101 00111011 00001010 00100000 00100000 01100011  e;.  c
000006e4: 01101111 01101110 01110011 01110100 00100000 01101001  onst i
000006ea: 01101110 01110100 00100000 01010011 01010000 01000001  nt SPA
000006f0: 01000011 01000101 01011111 01010000 01000101 01010010  CE_PER
000006f6: 01011111 01000010 01011001 01010100 01000101 00100000  _BYTE 
000006fc: 00111101 00100000 00110001 00111011 00001010 00001010  = 1;..
00000702: 00100000 00100000 00101111 00101111 00100000 01010000    // P
00000708: 01110010 01101001 01101110 01110100 00100000 01100100  rint d
0000070e: 01100001 01110100 01100001 00101100 00100000 01110011  ata, s
00000714: 01110000 01100001 01100011 01101001 01101110 01100111  pacing
0000071a: 00100000 01100101 01110110 01100101 01110010 01111001   every
00000720: 00100000 00110010 00100000 01100010 01111001 01110100   2 byt
00000726: 01100101 01110011 00001010 00100000 00100000 01100110  es.  f
0000072c: 01101111 01110010 00100000 00101000 01101001 01101110  or (in
00000732: 01110100 00100000 01101001 00100000 00111101 00100000  t i = 
00000738: 00110000 00111011 00100000 01101001 00100000 00111100  0; i <
0000073e: 00100000 01110011 01101001 01111010 01100101 00111011   size;
00000744: 00100000 01101001 00101011 00101011 00101001 00001010   i++).
0000074a: 00100000 00100000 01111011 00001010 00100000 00100000    {.  
00000750: 00100000 00100000 01101001 01100110 00100000 00101000    if (
00000756: 01101001 00100000 00100101 00100000 00110010 00100000  i % 2 
0000075c: 00111101 00111101 00100000 00110000 00101001 00001010  == 0).
00000762: 00100000 00100000 00100000 00100000 01111011 00001010      {.
00000768: 00100000 00100000 00100000 00100000 00100000 00100000        
0000076e: 01110000 01110010 01101001 01101110 01110100 01100110  printf
00000774: 00101000 00100010 00100000 00100010 00101001 00111011  (" ");
0000077a: 00001010 00100000 00100000 00100000 00100000 01111101  .    }
00000780: 00001010 00100000 00100000 00100000 00100000 01110000  .    p
00000786: 01110010 01101001 01101110 01110100 01100110 00101000  rintf(
0000078c: 00100010 00100101 01111000 00100010 00101100 00100000  "%x", 
00000792: 01100100 01100001 01110100 01100001 01011011 01101001  data[i
00000798: 01011101 00101001 00111011 00001010 00100000 00100000  ]);.  
0000079e: 01111101 00001010 00001010 00100000 00100000 00101111  }..  /
000007a4: 00101111 00100000 01010000 01110010 01101001 01101110  / Prin
000007aa: 01110100 00100000 01110100 01110010 01100001 01101001  t trai
000007b0: 01101100 01101001 01101110 01100111 00100000 01110011  ling s
000007b6: 01110000 01100001 01100011 01100101 00100000 01101111  pace o
000007bc: 01101110 00100000 01101100 01100001 01110011 01110100  n last
000007c2: 00100000 01101100 01101001 01101110 01100101 00001010   line.
000007c8: 00100000 00100000 01101001 01100110 00100000 00101000    if (
000007ce: 01001101 01001001 01010011 01010011 01001001 01001110  MISSIN
000007d4: 01000111 01011111 01000010 01001001 01010100 01010011  G_BITS
000007da: 00100000 00100001 00111101 00100000 00110000 00101001   != 0)
000007e0: 00001010 00100000 00100000 01111011 00001010 00100000  .  {. 
000007e6: 00100000 00100000 00100000 01100110 01101111 01110010     for
000007ec: 00100000 00101000 01101001 01101110 01110100 00100000   (int 
000007f2: 01101001 00100000 00111101 00100000 00110000 00111011  i = 0;
000007f8: 00100000 01101001 00100000 00111100 00100000 00101000   i < (
000007fe: 00101000 01001101 01001001 01010011 01010011 01001001  (MISSI
00000804: 01001110 01000111 01011111 01000010 01001001 01010100  NG_BIT
0000080a: 01010011 00100000 00101011 00100000 01010011 01010000  S + SP
00000810: 01000001 01000011 01000101 01011111 01010000 01000101  ACE_PE
00000816: 01010010 01011111 01000010 01011001 01010100 01000101  R_BYTE
0000081c: 00101001 00100000 00101010 00100000 00110010 00101001  ) * 2)
00000822: 00111011 00100000 01101001 00101011 00101011 00101001  ; i++)
00000828: 00001010 00100000 00100000 00100000 00100000 01111011  .    {
0000082e: 00001010 00100000 00100000 00100000 00100000 00100000  .     
00000834: 00100000 01110000 01110010 01101001 01101110 01110100   print
0000083a: 01100110 00101000 00100010 00100000 00100010 00101001  f(" ")
00000840: 00111011 00001010 00100000 00100000 00100000 00100000  ;.    
00000846: 01111101 00001010 00100000 00100000 01111101 00001010  }.  }.
0000084c: 01111101 00001010 00001010 00101111 00101010 00101010  }../**
00000852: 00001010 00100000 00101010 00100000 01010111 01110010  . * Wr
00000858: 01101001 01110100 01100101 01110011 00100000 01100100  ites d
0000085e: 01100001 01110100 01100001 00100000 01110100 01101111  ata to
00000864: 00100000 01110011 01110100 01100100 01101111 01110101   stdou
0000086a: 01110100 00100000 01100001 01110011 00100000 01100011  t as c
00000870: 01101000 01100001 01110010 01100001 01100011 01110100  haract
00000876: 01100101 01110010 01110011 00101110 00001010 00100000  ers.. 
0000087c: 00101010 00001010 00100000 00101010 00100000 01010011  *. * S
00000882: 01100101 01100101 00100000 01101101 01111001 01111000  ee myx
00000888: 01111000 01100100 00101110 01101101 01100100 00100000  xd.md 
0000088e: 01100110 01101111 01110010 00100000 01100100 01100101  for de
00000894: 01110100 01100001 01101001 01101100 01110011 00101110  tails.
0000089a: 00001010 00100000 00101010 00001010 00100000 00101010  . *. *
000008a0: 00100000 01100100 01100001 01110100 01100001 00111010   data:
000008a6: 00100000 01100001 01101110 00100000 01100001 01110010   an ar
000008ac: 01110010 01100001 01111001 00100000 01101111 01100110  ray of
000008b2: 00100000 01101110 01101111 00100000 01101101 01101111   no mo
000008b8: 01110010 01100101 00100000 01110100 01101000 01100001  re tha
000008be: 01101110 00100000 00110001 00110110 00100000 01100011  n 16 c
000008c4: 01101000 01100001 01110010 01100001 01100011 01110100  haract
000008ca: 01100101 01110010 01110011 00001010 00100000 00101010  ers. *
000008d0: 00100000 01110011 01101001 01111010 01100101 00111010   size:
000008d6: 00100000 01110100 01101000 01100101 00100000 01110011   the s
000008dc: 01101001 01111010 01100101 00100000 01101111 01100110  ize of
000008e2: 00100000 01110100 01101000 01100101 00100000 01100001   the a
000008e8: 01110010 01110010 01100001 01111001 00001010 00100000  rray. 
000008ee: 00101010 00101010 00101111 00001010 01110110 01101111  **/.vo
000008f4: 01101001 01100100 00100000 01110000 01110010 01101001  id pri
000008fa: 01101110 01110100 01000100 01100001 01110100 01100001  ntData
00000900: 01000001 01110011 01000011 01101000 01100001 01110010  AsChar
00000906: 01110011 00101000 01110101 01101110 01110011 01101001  s(unsi
0000090c: 01100111 01101110 01100101 01100100 00100000 01100011  gned c
00000912: 01101000 01100001 01110010 00100000 00101010 01100100  har *d
00000918: 01100001 01110100 01100001 00101100 00100000 01110011  ata, s
0000091e: 01101001 01111010 01100101 01011111 01110100 00100000  ize_t 
00000924: 01110011 01101001 01111010 01100101 00101001 00001010  size).
0000092a: 01111011 00001010 00100000 00100000 00101111 00101111  {.  //
00000930: 00100000 01110000 01110010 01101001 01101110 01110100   print
00000936: 01100110 00101000 00100010 00100101 01110011 00100010  f("%s"
0000093c: 00101100 00100000 01100100 01100001 01110100 01100001  , data
00000942: 00101001 00111011 00100000 01010111 01101000 01111001  ); Why
00000948: 00100000 01100100 01101111 01100101 01110011 01101110   doesn
0000094e: 00100111 01110100 00100000 01110100 01101000 01101001  't thi
00000954: 01110011 00100000 01110111 01101111 01110010 01101011  s work
0000095a: 00100001 00100001 00100001 00100001 00100001 00100001  !!!!!!
00000960: 00100001 00100001 00100001 00100001 00100001 00100001  !!!!!!
00000966: 00100001 00100001 00100001 00100001 00100001 00100001  !!!!!!
0000096c: 00100001 00100001 00100001 00100001 00100001 00100001  !!!!!!
00000972: 00100001 00100001 00100001 00100001 00100001 00100001  !!!!!!
00000978: 00100001 00100001 00100001 00100001 00100001 00100001  !!!!!!
0000097e: 00100001 00100001 00100001 00100001 00100001 00100001  !!!!!!
00000984: 00100001 00100001 00100001 00100001 00100001 00100001  !!!!!!
0000098a: 00100001 00100001 00100001 00100001 00100001 00100001  !!!!!!
00000990: 00100001 00100001 00100001 00100001 00100001 00100001  !!!!!!
00000996: 00100001 00100001 00001010 00100000 00100000 01100110  !!.  f
0000099c: 01101111 01110010 00100000 00101000 01101001 01101110  or (in
000009a2: 01110100 00100000 01101001 00100000 00111101 00100000  t i = 
000009a8: 00110000 00111011 00100000 01101001 00100000 00111100  0; i <
000009ae: 00100000 01110011 01101001 01111010 01100101 00111011   size;
000009b4: 00100000 01101001 00101011 00101011 00101001 00001010   i++).
000009ba: 00100000 00100000 01111011 00001010 00100000 00100000    {.  
000009c0: 00100000 00100000 01110000 01110010 01101001 01101110    prin
000009c6: 01110100 01100110 00101000 00100010 00100101 01100011  tf("%c
000009cc: 00100010 00101100 00100000 01100100 01100001 01110100  ", dat
000009d2: 01100001 01011011 01101001 01011101 00101001 00111011  a[i]);
000009d8: 00001010 00100000 00100000 01111101 00001010 01111101  .  }.}
000009de: 00001010 00001010 01110110 01101111 01101001 01100100  ..void
000009e4: 00100000 01110010 01100101 01100001 01100100 01000001   readA
000009ea: 01101110 01100100 01010000 01110010 01101001 01101110  ndPrin
000009f0: 01110100 01001001 01101110 01110000 01110101 01110100  tInput
000009f6: 01000001 01110011 01001000 01100101 01111000 00101000  AsHex(
000009fc: 01000110 01001001 01001100 01000101 00100000 00101010  FILE *
00000a02: 01101001 01101110 01110000 01110101 01110100 00101001  input)
00000a08: 00001010 01111011 00001010 00100000 00100000 01110101  .{.  u
00000a0e: 01101110 01110011 01101001 01100111 01101110 01100101  nsigne
00000a14: 01100100 00100000 01100011 01101000 01100001 01110010  d char
00000a1a: 00100000 01100100 01100001 01110100 01100001 01011011   data[
00000a20: 00110001 00110110 01011101 00111011 00001010 00100000  16];. 
00000a26: 00100000 01101001 01101110 01110100 00100000 01101110   int n
00000a2c: 01110101 01101101 01000010 01111001 01110100 01100101  umByte
00000a32: 01110011 01010010 01100101 01100001 01100100 00100000  sRead 
00000a38: 00111101 00100000 01100110 01110010 01100101 01100001  = frea
00000a3e: 01100100 00101000 01100100 01100001 01110100 01100001  d(data
00000a44: 00101100 00100000 00110001 00101100 00100000 00110001  , 1, 1
00000a4a: 00110110 00101100 00100000 01101001 01101110 01110000  6, inp
00000a50: 01110101 01110100 00101001 00111011 00001010 00100000  ut);. 
00000a56: 00100000 01110101 01101110 01110011 01101001 01100111   unsig
00000a5c: 01101110 01100101 01100100 00100000 01101001 01101110  ned in
00000a62: 01110100 00100000 01101111 01100110 01100110 01110011  t offs
00000a68: 01100101 01110100 00100000 00111101 00100000 00110000  et = 0
00000a6e: 00111011 00001010 00100000 00100000 01110111 01101000  ;.  wh
00000a74: 01101001 01101100 01100101 00100000 00101000 01101110  ile (n
00000a7a: 01110101 01101101 01000010 01111001 01110100 01100101  umByte
00000a80: 01110011 01010010 01100101 01100001 01100100 00100000  sRead 
00000a86: 00100001 00111101 00100000 00110000 00101001 00001010  != 0).
00000a8c: 00100000 00100000 01111011 00001010 00100000 00100000    {.  
00000a92: 00100000 00100000 01110000 01110010 01101001 01101110    prin
00000a98: 01110100 01100110 00101000 00100010 00100101 00110000  tf("%0
00000a9e: 00111000 01111000 00111010 00100010 00101100 00100000  8x:", 
00000aa4: 01101111 01100110 01100110 01110011 01100101 01110100  offset
00000aaa: 00101001 00111011 00001010 00100000 00100000 00100000  );.   
00000ab0: 00100000 01101111 01100110 01100110 01110011 01100101   offse
00000ab6: 01110100 00100000 00101011 00111101 00100000 01101110  t += n
00000abc: 01110101 01101101 01000010 01111001 01110100 01100101  umByte
00000ac2: 01110011 01010010 01100101 01100001 01100100 00111011  sRead;
00000ac8: 00001010 00100000 00100000 00100000 00100000 01110000  .    p
00000ace: 01110010 01101001 01101110 01110100 01000100 01100001  rintDa
00000ad4: 01110100 01100001 01000001 01110011 01001000 01100101  taAsHe
00000ada: 01111000 00101000 01100100 01100001 01110100 01100001  x(data
00000ae0: 00101100 00100000 01101110 01110101 01101101 01000010  , numB
00000ae6: 01111001 01110100 01100101 01110011 01010010 01100101  ytesRe
00000aec: 01100001 01100100 00101001 00111011 00001010 00100000  ad);. 
00000af2: 00100000 00100000 00100000 01110000 01110010 01101001     pri
00000af8: 01101110 01110100 01100110 00101000 00100010 00100000  ntf(" 
00000afe: 00100000 00100010 00101001 00111011 00001010 00100000   ");. 
00000b04: 00100000 00100000 00100000 01110000 01110010 01101001     pri
00000b0a: 01101110 01110100 01000100 01100001 01110100 01100001  ntData
00000b10: 01000001 01110011 01000011 01101000 01100001 01110010  AsChar
00000b16: 01110011 00101000 01100100 01100001 01110100 01100001  s(data
00000b1c: 00101100 00100000 01101110 01110101 01101101 01000010  , numB
00000b22: 01111001 01110100 01100101 01110011 01010010 01100101  ytesRe
00000b28: 01100001 01100100 00101001 00111011 00001010 00100000  ad);. 
00000b2e: 00100000 00100000 00100000 01110000 01110010 01101001     pri
00000b34: 01101110 01110100 01100110 00101000 00100010 01011100  ntf("\
00000b3a: 01101110 00100010 00101001 00111011 00001010 00100000  n");. 
00000b40: 00100000 00100000 00100000 01101110 01110101 01101101     num
00000b46: 01000010 01111001 01110100 01100101 01110011 01010010  BytesR
00000b4c: 01100101 01100001 01100100 00100000 00111101 00100000  ead = 
00000b52: 01100110 01110010 01100101 01100001 01100100 00101000  fread(
00000b58: 01100100 01100001 01110100 01100001 00101100 00100000  data, 
00000b5e: 00110001 00101100 00100000 00110001 00110110 00101100  1, 16,
00000b64: 00100000 01101001 01101110 01110000 01110101 01110100   input
00000b6a: 00101001 00111011 00001010 00100000 00100000 01111101  );.  }
00000b70: 00001010 01111101 00001010 00001010 00101111 00101010  .}../*
00000b76: 00101010 00001010 00100000 00101010 00100000 01000010  *. * B
00000b7c: 01101001 01110100 01110011 00100000 01101111 01110101  its ou
00000b82: 01110100 01110000 01110101 01110100 00100000 01100110  tput f
00000b88: 01101111 01110010 00100000 01111000 01111000 01100100  or xxd
00000b8e: 00101110 00001010 00100000 00101010 00001010 00100000  .. *. 
00000b94: 00101010 00100000 01010011 01100101 01100101 00100000  * See 
00000b9a: 01101101 01111001 01111000 01111000 01100100 00101110  myxxd.
00000ba0: 01101101 01100100 00100000 01100110 01101111 01110010  md for
00000ba6: 00100000 01100100 01100101 01110100 01100001 01101001   detai
00000bac: 01101100 01110011 00101110 00001010 00100000 00101010  ls.. *
00000bb2: 00001010 00100000 00101010 00100000 01101001 01101110  . * in
00000bb8: 01110000 01110101 01110100 00111010 00100000 01101001  put: i
00000bbe: 01101110 01110000 01110101 01110100 00100000 01110011  nput s
00000bc4: 01110100 01110010 01100101 01100001 01101101 00001010  tream.
00000bca: 00100000 00101010 00101010 00101111 00001010 01110110   **/.v
00000bd0: 01101111 01101001 01100100 00100000 01110010 01100101  oid re
00000bd6: 01100001 01100100 01000001 01101110 01100100 01010000  adAndP
00000bdc: 01110010 01101001 01101110 01110100 01001001 01101110  rintIn
00000be2: 01110000 01110101 01110100 01000001 01110011 01000010  putAsB
00000be8: 01101001 01110100 01110011 00101000 01000110 01001001  its(FI
00000bee: 01001100 01000101 00100000 00101010 01101001 01101110  LE *in
00000bf4: 01110000 01110101 01110100 00101001 00001010 01111011  put).{
00000bfa: 00001010 00100000 00100000 01110101 01101110 01110011  .  uns
00000c00: 01101001 01100111 01101110 01100101 01100100 00100000  igned 
00000c06: 01100011 01101000 01100001 01110010 00100000 01100100  char d
00000c0c: 01100001 01110100 01100001 01011011 00110001 00110110  ata[16
00000c12: 01011101 00111011 00001010 00100000 00100000 01101001  ];.  i
00000c18: 01101110 01110100 00100000 01101110 01110101 01101101  nt num
00000c1e: 01000010 01111001 01110100 01100101 01110011 01010010  BytesR
00000c24: 01100101 01100001 01100100 00100000 00111101 00100000  ead = 
00000c2a: 01100110 01110010 01100101 01100001 01100100 00101000  fread(
00000c30: 01100100 01100001 01110100 01100001 00101100 00100000  data, 
00000c36: 00110001 00101100 00100000 00110001 00110110 00101100  1, 16,
00000c3c: 00100000 01101001 01101110 01110000 01110101 01110100   input
00000c42: 00101001 00111011 00001010 00100000 00100000 01110101  );.  u
00000c48: 01101110 01110011 01101001 01100111 01101110 01100101  nsigne
00000c4e: 01100100 00100000 01101001 01101110 01110100 00100000  d int 
00000c54: 01101111 01100110 01100110 01110011 01100101 01110100  offset
00000c5a: 00100000 00111101 00100000 00110000 00111011 00001010   = 0;.
00000c60: 00100000 00100000 01110111 01101000 01101001 01101100    whil
00000c66: 01100101 00100000 00101000 01101110 01110101 01101101  e (num
00000c6c: 01000010 01111001 01110100 01100101 01110011 01010010  BytesR
00000c72: 01100101 01100001 01100100 00100000 00100001 00111101  ead !=
00000c78: 00100000 00110000 00101001 00001010 00100000 00100000   0).  
00000c7e: 01111011 00001010 00100000 00100000 00100000 00100000  {.    
00000c84: 01110000 01110010 01101001 01101110 01110100 01100110  printf
00000c8a: 00101000 00100010 00100101 00110000 00111000 01111000  ("%08x
00000c90: 00111010 00100010 00101100 00100000 01101111 01100110  :", of
00000c96: 01100110 01110011 01100101 01110100 00101001 00111011  fset);
00000c9c: 00001010 00100000 00100000 00100000 00100000 01101111  .    o
00000ca2: 01100110 01100110 01110011 01100101 01110100 00100000  ffset 
00000ca8: 00101011 00111101 00100000 01101110 01110101 01101101  += num
00000cae: 01000010 01111001 01110100 01100101 01110011 01010010  BytesR
00000cb4: 01100101 01100001 01100100 00111011 00001010 00100000  ead;. 
00000cba: 00100000 00100000 00100000 01110000 01110010 01101001     pri
00000cc0: 01101110 01110100 01000100 01100001 01110100 01100001  ntData
00000cc6: 01000001 01110011 01000010 01101001 01110100 01110011  AsBits
00000ccc: 00101000 01100100 01100001 01110100 01100001 00101100  (data,
00000cd2: 00100000 01101110 01110101 01101101 01000010 01111001   numBy
00000cd8: 01110100 01100101 01110011 01010010 01100101 01100001  tesRea
00000cde: 01100100 00101001 00111011 00001010 00100000 00100000  d);.  
00000ce4: 00100000 00100000 01110000 01110010 01101001 01101110    prin
00000cea: 01110100 01100110 00101000 00100010 00100000 00100000  tf("  
00000cf0: 00100010 00101001 00111011 00001010 00100000 00100000  ");.  
00000cf6: 00100000 00100000 01110000 01110010 01101001 01101110    prin
00000cfc: 01110100 01000100 01100001 01110100 01100001 01000001  tDataA
00000d02: 01110011 01000011 01101000 01100001 01110010 01110011  sChars
00000d08: 00101000 01100100 01100001 01110100 01100001 00101100  (data,
00000d0e: 00100000 01101110 01110101 01101101 01000010 01111001   numBy
00000d14: 01110100 01100101 01110011 01010010 01100101 01100001  tesRea
00000d1a: 01100100 00101001 00111011 00001010 00100000 00100000  d);.  
00000d20: 00100000 00100000 01110000 01110010 01101001 01101110    prin
00000d26: 01110100 01100110 00101000 00100010 01011100 01101110  tf("\n
00000d2c: 00100010 00101001 00111011 00001010 00100000 00100000  ");.  
00000d32: 00100000 00100000 01101110 01110101 01101101 01000010    numB
00000d38: 01111001 01110100 01100101 01110011 01010010 01100101  ytesRe
00000d3e: 01100001 01100100 00100000 00111101 00100000 01100110  ad = f
00000d44: 01110010 01100101 01100001 01100100 00101000 01100100  read(d
00000d4a: 01100001 01110100 01100001 00101100 00100000 00110001  ata, 1
00000d50: 00101100 00100000 00110001 00110110 00101100 00100000  , 16, 
00000d56: 01101001 01101110 01110000 01110101 01110100 00101001  input)
00000d5c: 00111011 00001010 00100000 00100000 01111101 00001010  ;.  }.
00000d62: 01111101 00001010 00001010 01101001 01101110 01110100  }..int
00000d68: 00100000 01101101 01100001 01101001 01101110 00101000   main(
00000d6e: 01101001 01101110 01110100 00100000 01100001 01110010  int ar
00000d74: 01100111 01100011 00101100 00100000 01100011 01101000  gc, ch
00000d7a: 01100001 01110010 00100000 00101010 00101010 01100001  ar **a
00000d80: 01110010 01100111 01110110 00101001 00001010 01111011  rgv).{
00000d86: 00001010 00100000 00100000 01101001 01101110 01110100  .  int
00000d8c: 00100000 01100010 01101001 01110100 01110011 00100000   bits 
00000d92: 00111101 00100000 01000110 01000001 01001100 01010011  = FALS
00000d98: 01000101 00111011 00001010 00100000 00100000 01000110  E;.  F
00000d9e: 01001001 01001100 01000101 00100000 00101010 01101001  ILE *i
00000da4: 01101110 01110000 01110101 01110100 00100000 00111101  nput =
00000daa: 00100000 01110000 01100001 01110010 01110011 01100101   parse
00000db0: 01000011 01101111 01101101 01101101 01100001 01101110  Comman
00000db6: 01100100 01001100 01101001 01101110 01100101 00101000  dLine(
00000dbc: 01100001 01110010 01100111 01100011 00101100 00100000  argc, 
00000dc2: 01100001 01110010 01100111 01110110 00101100 00100000  argv, 
00000dc8: 00100110 01100010 01101001 01110100 01110011 00101001  &bits)
00000dce: 00111011 00001010 00001010 00100000 00100000 01101001  ;..  i
00000dd4: 01100110 00100000 00101000 01100010 01101001 01110100  f (bit
00000dda: 01110011 00100000 00111101 00111101 00100000 01000110  s == F
00000de0: 01000001 01001100 01010011 01000101 00101001 00001010  ALSE).
00000de6: 00100000 00100000 01111011 00001010 00100000 00100000    {.  
00000dec: 00100000 00100000 01110010 01100101 01100001 01100100    read
00000df2: 01000001 01101110 01100100 01010000 01110010 01101001  AndPri
00000df8: 01101110 01110100 01001001 01101110 01110000 01110101  ntInpu
00000dfe: 01110100 01000001 01110011 01001000 01100101 01111000  tAsHex
00000e04: 00101000 01101001 01101110 01110000 01110101 01110100  (input
00000e0a: 00101001 00111011 00001010 00100000 00100000 01111101  );.  }
00000e10: 00001010 00100000 00100000 01100101 01101100 01110011  .  els
00000e16: 01100101 00001010 00100000 00100000 01111011 00001010  e.  {.
00000e1c: 00100000 00100000 00100000 00100000 01110010 01100101      re
00000e22: 01100001 01100100 01000001 01101110 01100100 01010000  adAndP
00000e28: 01110010 01101001 01101110 01110100 01001001 01101110  rintIn
00000e2e: 01110000 01110101 01110100 01000001 01110011 01000010  putAsB
00000e34: 01101001 01110100 01110011 00101000 01101001 01101110  its(in
00000e3a: 01110000 01110101 01110100 00101001 00111011 00001010  put);.
00000e40: 00100000 00100000 01111101 00001010 00100000 00100000    }.  
00000e46: 01110010 01100101 01110100 01110101 01110010 01101110  return
00000e4c: 00100000 00110000 00111011 00001010 01111101 00001010   0;.}.
