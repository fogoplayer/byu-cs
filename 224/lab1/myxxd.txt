00000000:2369 6e63 6c75 6465 203c 7374 6469 6f2e   #include <stdio.ˆ]ŸÊÿ
00000010:683e a23 696e 636c 7564 6520 3c73 7464   h>
#include <stdˆ]ŸÊÿ
00000020:6c69 622e 683e a23 696e 636c 7564 6520   lib.h>
#include ˆ]ŸÊÿ
00000030:3c73 7472 696e 672e 683e aa 2364 6566   <string.h>

#defˆ]ŸÊÿ
00000040:696e 6520 5452 5545 2031 a23 6465 6669   ine TRUE 1
#defiˆ]ŸÊÿ
00000050:6e65 2046 414c 5345 2030 a23 6465 6669   ne FALSE 0
#defiˆ]ŸÊÿ
00000060:6e65 2042 4144 5f4e 554d 4245 525f 4152   ne BAD_NUMBER_ARˆ]ŸÊÿ
00000070:4753 2031 aa 2f2a 2aa 202a 2050 6172   GS 1

/**
 * Parˆ]ŸÊÿ
00000080:7365 7320 7468 6520 636f 6d6d 616e 6420   ses the command ˆ]ŸÊÿ
00000090:6c69 6e65 2ea 202a a20 2a20 6172 6763   line.
 *
 * argcˆ]ŸÊÿ
000000a0:3a20 7468 6520 6e75 6d62 6572 206f 6620   : the number of ˆ]ŸÊÿ
000000b0:6974 656d 7320 6f6e 2074 6865 2063 6f6d   items on the comˆ]ŸÊÿ
000000c0:6d61 6e64 206c 696e 6520 2861 6e64 206c   mand line (and lˆ]ŸÊÿ
000000d0:656e 6774 6820 6f66 2074 6865 a20 2a20   ength of the
 * ˆ]ŸÊÿ
000000e0:2020 2020 2020 6172 6776 2061 7272 6179         argv arrayˆ]ŸÊÿ
000000f0:2920 696e 636c 7564 696e 6720 7468 6520   ) including the ˆ]ŸÊÿ
00000100:6578 6563 7574 6162 6c65 a20 2a20 6172   executable
 * arˆ]ŸÊÿ
00000110:6776 3a20 7468 6520 6172 7261 7920 6f66   gv: the array ofˆ]ŸÊÿ
00000120:2061 7267 756d 656e 7473 2061 7320 7374    arguments as stˆ]ŸÊÿ
00000130:7269 6e67 7320 2863 6861 722a 2061 7272   rings (char* arrˆ]ŸÊÿ
00000140:6179 29a 202a 2062 6974 733a 2074 6865   ay)
 * bits: theˆ]ŸÊÿ
00000150:2069 6e74 6567 6572 2076 616c 7565 2069    integer value iˆ]ŸÊÿ
00000160:7320 7365 7420 746f 2054 5255 4520 6966   s set to TRUE ifˆ]ŸÊÿ
00000170:2062 6974 7320 6f75 7470 7574 2069 6e64    bits output indˆ]ŸÊÿ
00000180:6963 6174 6564 a20 2a20 2020 2020 2020   icated
 *       ˆ]ŸÊÿ
00000190:6f75 7468 6572 7769 7365 2046 414c 5345   outherwise FALSEˆ]ŸÊÿ
000001a0:2066 6f72 2068 6578 206f 7574 7075 74a    for hex output
ˆ]ŸÊÿ
000001b0:202a a20 2a20 7265 7475 726e 7320 7468    *
 * returns thˆ]ŸÊÿ
000001c0:6520 696e 7075 7420 6669 6c65 2070 6f69   e input file poiˆ]ŸÊÿ
000001d0:6e74 6572 2028 4649 4c45 2a29 a20 2a2a   nter (FILE*)
 **ˆ]ŸÊÿ
000001e0:2fa 4649 4c45 202a 7061 7273 6543 6f6d   /
FILE *parseComˆ]ŸÊÿ
000001f0:6d61 6e64 4c69 6e65 2869 6e74 2061 7267   mandLine(int argˆ]ŸÊÿ
00000200:632c 2063 6861 7220 2a2a 6172 6776 2c20   c, char **argv, ˆ]ŸÊÿ
00000210:696e 7420 2a62 6974 7329 a7b a20 2069   int *bits)
{
  iˆ]ŸÊÿ
00000220:6620 2861 7267 6320 3e20 3229 a20 207b   f (argc > 2)
  {ˆ]ŸÊÿ
00000230:a20 2020 2070 7269 6e74 6628 2255 7361   
    printf("Usaˆ]ŸÊÿ
00000240:6765 3a20 2573 205b 2d62 7c2d 6269 7473   ge: %s [-b|-bitsˆ]ŸÊÿ
00000250:5d5c 6e22 2c20 6172 6776 5b30 5d29 3ba   ]\n", argv[0]);
ˆ]ŸÊÿ
00000260:2020 2020 6578 6974 2842 4144 5f4e 554d       exit(BAD_NUMˆ]ŸÊÿ
00000270:4245 525f 4152 4753 293b a20 207d aa   BER_ARGS);
  }

ˆ]ŸÊÿ
00000280:2020 6966 2028 6172 6763 203d 3d20 3220     if (argc == 2 ˆ]ŸÊÿ
00000290:2626 a20 2020 2020 2028 7374 7263 6d70   &&
      (strcmpˆ]ŸÊÿ
000002a0:2861 7267 765b 315d 2c20 222d 6222 2920   (argv[1], "-b") ˆ]ŸÊÿ
000002b0:3d3d 2030 207c 7c20 7374 7263 6d70 2861   == 0 || strcmp(aˆ]ŸÊÿ
000002c0:7267 765b 315d 2c20 222d 6269 7473 2229   rgv[1], "-bits")ˆ]ŸÊÿ
000002d0:203d 3d20 3029 29a 2020 7ba 2020 2020    == 0))
  {
    ˆ]ŸÊÿ
000002e0:2a62 6974 7320 3d20 5452 5545 3ba 2020   *bits = TRUE;
  ˆ]ŸÊÿ
000002f0:7da 2020 656c 7365 a20 207b a20 2020   }
  else
  {
   ˆ]ŸÊÿ
00000300:202a 6269 7473 203d 2046 414c 5345 3ba    *bits = FALSE;
ˆ]ŸÊÿ
00000310:2020 7da a20 2072 6574 7572 6e20 7374     }

  return stˆ]ŸÊÿ
00000320:6469 6e3b a7d aa 2f2a 2aa 202a 2057   din;
}

/**
 * Wˆ]ŸÊÿ
00000330:7269 7465 7320 6461 7461 2074 6f20 7374   rites data to stˆ]ŸÊÿ
00000340:646f 7574 2069 6e20 6865 7861 6465 6369   dout in hexadeciˆ]ŸÊÿ
00000350:6d61 6c2e a20 2aa 202a 2053 6565 206d   mal.
 *
 * See mˆ]ŸÊÿ
00000360:7978 7864 2e6d 6420 666f 7220 6465 7461   yxxd.md for detaˆ]ŸÊÿ
00000370:696c 732e a20 2aa 202a 2064 6174 613a   ils.
 *
 * data:ˆ]ŸÊÿ
00000380:2061 6e20 6172 7261 7920 6f66 206e 6f20    an array of no ˆ]ŸÊÿ
00000390:6d6f 7265 2074 6861 6e20 3136 2063 6861   more than 16 chaˆ]ŸÊÿ
000003a0:7261 6374 6572 73a 202a 2073 697a 653a   racters
 * size:ˆ]ŸÊÿ
000003b0:2074 6865 2073 697a 6520 6f66 2074 6865    the size of theˆ]ŸÊÿ
000003c0:2061 7272 6179 a20 2a2a 2fa 766f 6964    array
 **/
voidˆ]ŸÊÿ
000003d0:2070 7269 6e74 4461 7461 4173 4865 7828    printDataAsHex(ˆ]ŸÊÿ
000003e0:756e 7369 676e 6564 2063 6861 7220 2a64   unsigned char *dˆ]ŸÊÿ
000003f0:6174 612c 2073 697a 655f 7420 7369 7a65   ata, size_t sizeˆ]ŸÊÿ
00000400:29a 7ba 2020 666f 7228 696e 7420 6920   )
{
  for(int i ˆ]ŸÊÿ
00000410:3d20 303b 2069 203c 2031 363b 2069 2b2b   = 0; i < 16; i++ˆ]ŸÊÿ
00000420:29a 2020 7ba 2020 2020 7072 696e 7466   )
  {
    printfˆ]ŸÊÿ
00000430:2822 2578 222c 2064 6174 615b 695d 293b   ("%x", data[i]);ˆ]ŸÊÿ
00000440:a20 2020 2069 6628 6920 2520 3220 3d3d   
    if(i % 2 ==ˆ]ŸÊÿ
00000450:2031 2920 7ba 2020 2020 2020 7072 696e    1) {
      prinˆ]ŸÊÿ
00000460:7466 2822 2022 293b a20 2020 207d a20   tf(" ");
    }
 ˆ]ŸÊÿ
00000470:207d a7d aa 2f2a 2aa 202a 2057 7269    }
}

/**
 * Wriˆ]ŸÊÿ
00000480:7465 7320 6461 7461 2074 6f20 7374 646f   tes data to stdoˆ]ŸÊÿ
00000490:7574 2061 7320 6368 6172 6163 7465 7273   ut as charactersˆ]ŸÊÿ
000004a0:2ea 202a a20 2a20 5365 6520 6d79 7878   .
 *
 * See myxxˆ]ŸÊÿ
000004b0:642e 6d64 2066 6f72 2064 6574 6169 6c73   d.md for detailsˆ]ŸÊÿ
000004c0:2ea 202a a20 2a20 6461 7461 3a20 616e   .
 *
 * data: anˆ]ŸÊÿ
000004d0:2061 7272 6179 206f 6620 6e6f 206d 6f72    array of no morˆ]ŸÊÿ
000004e0:6520 7468 616e 2031 3620 6368 6172 6163   e than 16 characˆ]ŸÊÿ
000004f0:7465 7273 a20 2a20 7369 7a65 3a20 7468   ters
 * size: thˆ]ŸÊÿ
00000500:6520 7369 7a65 206f 6620 7468 6520 6172   e size of the arˆ]ŸÊÿ
00000510:7261 79a 202a 2a2f a76 6f69 6420 7072   ray
 **/
void prˆ]ŸÊÿ
00000520:696e 7444 6174 6141 7343 6861 7273 2875   intDataAsChars(uˆ]ŸÊÿ
00000530:6e73 6967 6e65 6420 6368 6172 202a 6461   nsigned char *daˆ]ŸÊÿ
00000540:7461 2c20 7369 7a65 5f74 2073 697a 6529   ta, size_t size)ˆ]ŸÊÿ
00000550:a7b a20 2070 7269 6e74 6628 2225 7322   
{
  printf("%s"ˆ]ŸÊÿ
00000560:2c20 6461 7461 293b a7d aa 766f 6964   , data);
}

voidˆ]ŸÊÿ
00000570:2072 6561 6441 6e64 5072 696e 7449 6e70    readAndPrintInpˆ]ŸÊÿ
00000580:7574 4173 4865 7828 4649 4c45 202a 696e   utAsHex(FILE *inˆ]ŸÊÿ
00000590:7075 7429 a7b a20 2075 6e73 6967 6e65   put)
{
  unsigneˆ]ŸÊÿ
000005a0:6420 6368 6172 2064 6174 615b 3136 5d3b   d char data[16];ˆ]ŸÊÿ
000005b0:a20 2069 6e74 206e 756d 4279 7465 7352   
  int numBytesRˆ]ŸÊÿ
000005c0:6561 6420 3d20 6672 6561 6428 6461 7461   ead = fread(dataˆ]ŸÊÿ
000005d0:2c20 312c 2031 362c 2069 6e70 7574 293b   , 1, 16, input);ˆ]ŸÊÿ
000005e0:a20 2075 6e73 6967 6e65 6420 696e 7420   
  unsigned int ˆ]ŸÊÿ
000005f0:6f66 6673 6574 203d 2030 3ba 2020 7768   offset = 0;
  whˆ]ŸÊÿ
00000600:696c 6520 286e 756d 4279 7465 7352 6561   ile (numBytesReaˆ]ŸÊÿ
00000610:6420 213d 2030 29a 2020 7ba 2020 2020   d != 0)
  {
    ˆ]ŸÊÿ
00000620:7072 696e 7466 2822 2530 3878 3a22 2c20   printf("%08x:", ˆ]ŸÊÿ
00000630:6f66 6673 6574 293b a20 2020 206f 6666   offset);
    offˆ]ŸÊÿ
00000640:7365 7420 2b3d 206e 756d 4279 7465 7352   set += numBytesRˆ]ŸÊÿ
00000650:6561 643b a20 2020 2070 7269 6e74 4461   ead;
    printDaˆ]ŸÊÿ
00000660:7461 4173 4865 7828 6461 7461 2c20 6e75   taAsHex(data, nuˆ]ŸÊÿ
00000670:6d42 7974 6573 5265 6164 293b a20 2020   mBytesRead);
   ˆ]ŸÊÿ
00000680:2070 7269 6e74 6628 2220 2022 293b a20    printf("  ");
 ˆ]ŸÊÿ
00000690:2020 2070 7269 6e74 4461 7461 4173 4368      printDataAsChˆ]ŸÊÿ
000006a0:6172 7328 6461 7461 2c20 6e75 6d42 7974   ars(data, numBytˆ]ŸÊÿ
000006b0:6573 5265 6164 293b a20 2020 2070 7269   esRead);
    priˆ]ŸÊÿ
000006c0:6e74 6628 225c 6e22 293b a20 2020 206e   ntf("\n");
    nˆ]ŸÊÿ
000006d0:756d 4279 7465 7352 6561 6420 3d20 6672   umBytesRead = frˆ]ŸÊÿ
000006e0:6561 6428 6461 7461 2c20 312c 2031 362c   ead(data, 1, 16,ˆ]ŸÊÿ
000006f0:2069 6e70 7574 293b a20 207d a7d aa    input);
  }
}

ˆ]ŸÊÿ
00000700:2f2a 2aa 202a 2042 6974 7320 6f75 7470   /**
 * Bits outpˆ]ŸÊÿ
00000710:7574 2066 6f72 2078 7864 2ea 202a a20   ut for xxd.
 *
 ˆ]ŸÊÿ
00000720:2a20 5365 6520 6d79 7878 642e 6d64 2066   * See myxxd.md fˆ]ŸÊÿ
00000730:6f72 2064 6574 6169 6c73 2ea 202a a20   or details.
 *
 ˆ]ŸÊÿ
00000740:2a20 696e 7075 743a 2069 6e70 7574 2073   * input: input sˆ]ŸÊÿ
00000750:7472 6561 6da 202a 2a2f a76 6f69 6420   tream
 **/
void ˆ]ŸÊÿ
00000760:7265 6164 416e 6450 7269 6e74 496e 7075   readAndPrintInpuˆ]ŸÊÿ
00000770:7441 7342 6974 7328 4649 4c45 202a 696e   tAsBits(FILE *inˆ]ŸÊÿ
00000780:7075 7429 a7b a20 2070 7269 6e74 6628   put)
{
  printf(ˆ]ŸÊÿ
00000790:2254 4f44 4f20 333a 2072 6561 6441 6e64   "TODO 3: readAndˆ]ŸÊÿ
000007a0:5072 696e 7449 6e70 7574 4173 4269 7473   PrintInputAsBitsˆ]ŸÊÿ
000007b0:5c6e 2229 3ba 7da a69 6e74 206d 6169   \n");
}

int maiˆ]ŸÊÿ
000007c0:6e28 696e 7420 6172 6763 2c20 6368 6172   n(int argc, charˆ]ŸÊÿ
000007d0:202a 2a61 7267 7629 a7b a20 2069 6e74    **argv)
{
  intˆ]ŸÊÿ
000007e0:2062 6974 7320 3d20 4641 4c53 453b a20    bits = FALSE;
 ˆ]ŸÊÿ
000007f0:2046 494c 4520 2a69 6e70 7574 203d 2070    FILE *input = pˆ]ŸÊÿ
00000800:6172 7365 436f 6d6d 616e 644c 696e 6528   arseCommandLine(ˆ]ŸÊÿ
00000810:6172 6763 2c20 6172 6776 2c20 2662 6974   argc, argv, &bitˆ]ŸÊÿ
00000820:7329 3ba a20 2069 6620 2862 6974 7320   s);

  if (bits ˆ]ŸÊÿ
00000830:3d3d 2046 414c 5345 29a 2020 7ba 2020   == FALSE)
  {
  ˆ]ŸÊÿ
00000840:2020 7265 6164 416e 6450 7269 6e74 496e     readAndPrintInˆ]ŸÊÿ
00000850:7075 7441 7348 6578 2869 6e70 7574 293b   putAsHex(input);ˆ]ŸÊÿ
00000860:a20 207d a20 2065 6c73 65a 2020 7ba   
  }
  else
  {
ˆ]ŸÊÿ
00000870:2020 2020 7265 6164 416e 6450 7269 6e74       readAndPrintˆ]ŸÊÿ
00000880:496e 7075 7441 7342 6974 7328 696e 7075   InputAsBits(inpuˆ]ŸÊÿ
00000890:7429 3ba 2020 7da 2020 7265 7475 726e   t);
  }
  returnˆ]ŸÊÿ
000008a0:2030 3ba 7da 7da 2020 7265 7475 726e    0;
}
}
  returnˆ]ŸÊÿ
