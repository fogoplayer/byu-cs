00000000: 2369 6e63 6c75 6465 203c 7374 6469 6f2e  #include <stdio.
00000010: 683e 0a23 696e 636c 7564 6520 3c73 7464  h>.#include <std
00000020: 6c69 622e 683e 0a23 696e 636c 7564 6520  lib.h>.#include 
00000030: 3c73 7472 696e 672e 683e 0a0a 2364 6566  <string.h>..#def
00000040: 696e 6520 5452 5545 2031 0a23 6465 6669  ine TRUE 1.#defi
00000050: 6e65 2046 414c 5345 2030 0a23 6465 6669  ne FALSE 0.#defi
00000060: 6e65 2042 4144 5f4e 554d 4245 525f 4152  ne BAD_NUMBER_AR
00000070: 4753 2031 0a0a 2f2a 2a0a 202a 2050 6172  GS 1../**. * Par
00000080: 7365 7320 7468 6520 636f 6d6d 616e 6420  ses the command 
00000090: 6c69 6e65 2e0a 202a 0a20 2a20 6172 6763  line.. *. * argc
000000a0: 3a20 7468 6520 6e75 6d62 6572 206f 6620  : the number of 
000000b0: 6974 656d 7320 6f6e 2074 6865 2063 6f6d  items on the com
000000c0: 6d61 6e64 206c 696e 6520 2861 6e64 206c  mand line (and l
000000d0: 656e 6774 6820 6f66 2074 6865 0a20 2a20  ength of the. * 
000000e0: 2020 2020 2020 6172 6776 2061 7272 6179        argv array
000000f0: 2920 696e 636c 7564 696e 6720 7468 6520  ) including the 
00000100: 6578 6563 7574 6162 6c65 0a20 2a20 6172  executable. * ar
00000110: 6776 3a20 7468 6520 6172 7261 7920 6f66  gv: the array of
00000120: 2061 7267 756d 656e 7473 2061 7320 7374   arguments as st
00000130: 7269 6e67 7320 2863 6861 722a 2061 7272  rings (char* arr
00000140: 6179 290a 202a 2062 6974 733a 2074 6865  ay). * bits: the
00000150: 2069 6e74 6567 6572 2076 616c 7565 2069   integer value i
00000160: 7320 7365 7420 746f 2054 5255 4520 6966  s set to TRUE if
00000170: 2062 6974 7320 6f75 7470 7574 2069 6e64   bits output ind
00000180: 6963 6174 6564 0a20 2a20 2020 2020 2020  icated. *       
00000190: 6f75 7468 6572 7769 7365 2046 414c 5345  outherwise FALSE
000001a0: 2066 6f72 2068 6578 206f 7574 7075 740a   for hex output.
000001b0: 202a 0a20 2a20 7265 7475 726e 7320 7468   *. * returns th
000001c0: 6520 696e 7075 7420 6669 6c65 2070 6f69  e input file poi
000001d0: 6e74 6572 2028 4649 4c45 2a29 0a20 2a2a  nter (FILE*). **
000001e0: 2f0a 4649 4c45 202a 7061 7273 6543 6f6d  /.FILE *parseCom
000001f0: 6d61 6e64 4c69 6e65 2869 6e74 2061 7267  mandLine(int arg
00000200: 632c 2063 6861 7220 2a2a 6172 6776 2c20  c, char **argv, 
00000210: 696e 7420 2a62 6974 7329 0a7b 0a20 2069  int *bits).{.  i
00000220: 6620 2861 7267 6320 3e20 3229 0a20 207b  f (argc > 2).  {
00000230: 0a20 2020 2070 7269 6e74 6628 2255 7361  .    printf("Usa
00000240: 6765 3a20 2573 205b 2d62 7c2d 6269 7473  ge: %s [-b|-bits
00000250: 5d5c 6e22 2c20 6172 6776 5b30 5d29 3b0a  ]\n", argv[0]);.
00000260: 2020 2020 6578 6974 2842 4144 5f4e 554d      exit(BAD_NUM
00000270: 4245 525f 4152 4753 293b 0a20 207d 0a0a  BER_ARGS);.  }..
00000280: 2020 6966 2028 6172 6763 203d 3d20 3220    if (argc == 2 
00000290: 2626 0a20 2020 2020 2028 7374 7263 6d70  &&.      (strcmp
000002a0: 2861 7267 765b 315d 2c20 222d 6222 2920  (argv[1], "-b") 
000002b0: 3d3d 2030 207c 7c20 7374 7263 6d70 2861  == 0 || strcmp(a
000002c0: 7267 765b 315d 2c20 222d 6269 7473 2229  rgv[1], "-bits")
000002d0: 203d 3d20 3029 290a 2020 7b0a 2020 2020   == 0)).  {.    
000002e0: 2a62 6974 7320 3d20 5452 5545 3b0a 2020  *bits = TRUE;.  
000002f0: 7d0a 2020 656c 7365 0a20 207b 0a20 2020  }.  else.  {.   
00000300: 202a 6269 7473 203d 2046 414c 5345 3b0a   *bits = FALSE;.
00000310: 2020 7d0a 0a20 2072 6574 7572 6e20 7374    }..  return st
00000320: 6469 6e3b 0a7d 0a0a 2f2a 2a0a 202a 2057  din;.}../**. * W
00000330: 7269 7465 7320 6461 7461 2074 6f20 7374  rites data to st
00000340: 646f 7574 2069 6e20 6865 7861 6465 6369  dout in hexadeci
00000350: 6d61 6c2e 0a20 2a0a 202a 2053 6565 206d  mal.. *. * See m
00000360: 7978 7864 2e6d 6420 666f 7220 6465 7461  yxxd.md for deta
00000370: 696c 732e 0a20 2a0a 202a 2064 6174 613a  ils.. *. * data:
00000380: 2061 6e20 6172 7261 7920 6f66 206e 6f20   an array of no 
00000390: 6d6f 7265 2074 6861 6e20 3136 2063 6861  more than 16 cha
000003a0: 7261 6374 6572 730a 202a 2073 697a 653a  racters. * size:
000003b0: 2074 6865 2073 697a 6520 6f66 2074 6865   the size of the
000003c0: 2061 7272 6179 0a20 2a2a 2f0a 766f 6964   array. **/.void
000003d0: 2070 7269 6e74 4461 7461 4173 4865 7828   printDataAsHex(
000003e0: 756e 7369 676e 6564 2063 6861 7220 2a64  unsigned char *d
000003f0: 6174 612c 2073 697a 655f 7420 7369 7a65  ata, size_t size
00000400: 290a 7b0a 2020 636f 6e73 7420 696e 7420  ).{.  const int 
00000410: 4249 545f 434f 554e 5420 3d20 3136 3b0a  BIT_COUNT = 16;.
00000420: 2020 636f 6e73 7420 696e 7420 4d49 5353    const int MISS
00000430: 494e 475f 4249 5453 203d 2042 4954 5f43  ING_BITS = BIT_C
00000440: 4f55 4e54 202d 2073 697a 653b 0a20 2063  OUNT - size;.  c
00000450: 6f6e 7374 2069 6e74 2053 5041 4345 5f50  onst int SPACE_P
00000460: 4552 5f42 5954 4520 3d20 313b 0a0a 2020  ER_BYTE = 1;..  
00000470: 666f 7220 2869 6e74 2069 203d 2030 3b20  for (int i = 0; 
00000480: 6920 3c20 7369 7a65 3b20 692b 2b29 0a20  i < size; i++). 
00000490: 207b 0a20 2020 2069 6620 2869 2025 2032   {.    if (i % 2
000004a0: 203d 3d20 3029 0a20 2020 207b 0a20 2020   == 0).    {.   
000004b0: 2020 2070 7269 6e74 6628 2220 2229 3b0a     printf(" ");.
000004c0: 2020 2020 7d0a 2020 2020 7072 696e 7466      }.    printf
000004d0: 2822 2578 222c 2064 6174 615b 695d 293b  ("%x", data[i]);
000004e0: 0a20 207d 0a0a 2020 2f2f 2070 7269 6e74  .  }..  // print
000004f0: 6628 2250 5249 4e54 2025 6c64 222c 2028  f("PRINT %ld", (
00000500: 4249 545f 434f 554e 5420 2d20 7369 7a65  BIT_COUNT - size
00000510: 202b 2053 5041 4345 5f50 4552 5f42 5954   + SPACE_PER_BYT
00000520: 4529 293b 0a20 2069 6620 284d 4953 5349  E));.  if (MISSI
00000530: 4e47 5f42 4954 5320 213d 2030 290a 2020  NG_BITS != 0).  
00000540: 7b0a 2020 2020 666f 7220 2869 6e74 2069  {.    for (int i
00000550: 203d 2030 3b20 6920 3c20 2828 4d49 5353   = 0; i < ((MISS
00000560: 494e 475f 4249 5453 202b 2053 5041 4345  ING_BITS + SPACE
00000570: 5f50 4552 5f42 5954 4529 202a 2032 293b  _PER_BYTE) * 2);
00000580: 2069 2b2b 290a 2020 2020 7b0a 2020 2020   i++).    {.    
00000590: 2020 7072 696e 7466 2822 2022 293b 0a20    printf(" ");. 
000005a0: 2020 207d 0a20 207d 0a7d 0a0a 2f2a 2a0a     }.  }.}../**.
000005b0: 202a 2057 7269 7465 7320 6461 7461 2074   * Writes data t
000005c0: 6f20 7374 646f 7574 2061 7320 6368 6172  o stdout as char
000005d0: 6163 7465 7273 2e0a 202a 0a20 2a20 5365  acters.. *. * Se
000005e0: 6520 6d79 7878 642e 6d64 2066 6f72 2064  e myxxd.md for d
000005f0: 6574 6169 6c73 2e0a 202a 0a20 2a20 6461  etails.. *. * da
00000600: 7461 3a20 616e 2061 7272 6179 206f 6620  ta: an array of 
00000610: 6e6f 206d 6f72 6520 7468 616e 2031 3620  no more than 16 
00000620: 6368 6172 6163 7465 7273 0a20 2a20 7369  characters. * si
00000630: 7a65 3a20 7468 6520 7369 7a65 206f 6620  ze: the size of 
00000640: 7468 6520 6172 7261 790a 202a 2a2f 0a76  the array. **/.v
00000650: 6f69 6420 7072 696e 7444 6174 6141 7343  oid printDataAsC
00000660: 6861 7273 2875 6e73 6967 6e65 6420 6368  hars(unsigned ch
00000670: 6172 202a 6461 7461 2c20 7369 7a65 5f74  ar *data, size_t
00000680: 2073 697a 6529 0a7b 0a20 202f 2f20 7072   size).{.  // pr
00000690: 696e 7466 2822 2573 222c 2064 6174 6129  intf("%s", data)
000006a0: 3b20 5768 7920 646f 6573 6e27 7420 7468  ; Why doesn't th
000006b0: 6973 2077 6f72 6b21 2121 2121 2121 2121  is work!!!!!!!!!
000006c0: 2121 2121 2121 2121 2121 210a 2020 666f  !!!!!!!!!!!.  fo
000006d0: 7220 2869 6e74 2069 203d 2030 3b20 6920  r (int i = 0; i 
000006e0: 3c20 7369 7a65 3b20 692b 2b29 0a20 207b  < size; i++).  {
000006f0: 0a20 2020 2070 7269 6e74 6628 2225 6322  .    printf("%c"
00000700: 2c20 6461 7461 5b69 5d29 3b0a 2020 7d0a  , data[i]);.  }.
00000710: 7d0a 0a76 6f69 6420 7265 6164 416e 6450  }..void readAndP
00000720: 7269 6e74 496e 7075 7441 7348 6578 2846  rintInputAsHex(F
00000730: 494c 4520 2a69 6e70 7574 290a 7b0a 2020  ILE *input).{.  
00000740: 756e 7369 676e 6564 2063 6861 7220 6461  unsigned char da
00000750: 7461 5b31 365d 3b0a 2020 696e 7420 6e75  ta[16];.  int nu
00000760: 6d42 7974 6573 5265 6164 203d 2066 7265  mBytesRead = fre
00000770: 6164 2864 6174 612c 2031 2c20 3136 2c20  ad(data, 1, 16, 
00000780: 696e 7075 7429 3b0a 2020 756e 7369 676e  input);.  unsign
00000790: 6564 2069 6e74 206f 6666 7365 7420 3d20  ed int offset = 
000007a0: 303b 0a20 2077 6869 6c65 2028 6e75 6d42  0;.  while (numB
000007b0: 7974 6573 5265 6164 2021 3d20 3029 0a20  ytesRead != 0). 
000007c0: 207b 0a20 2020 2070 7269 6e74 6628 2225   {.    printf("%
000007d0: 3038 783a 222c 206f 6666 7365 7429 3b0a  08x:", offset);.
000007e0: 2020 2020 6f66 6673 6574 202b 3d20 6e75      offset += nu
000007f0: 6d42 7974 6573 5265 6164 3b0a 2020 2020  mBytesRead;.    
00000800: 7072 696e 7444 6174 6141 7348 6578 2864  printDataAsHex(d
00000810: 6174 612c 206e 756d 4279 7465 7352 6561  ata, numBytesRea
00000820: 6429 3b0a 2020 2020 7072 696e 7466 2822  d);.    printf("
00000830: 2020 2229 3b0a 2020 2020 7072 696e 7444    ");.    printD
00000840: 6174 6141 7343 6861 7273 2864 6174 612c  ataAsChars(data,
00000850: 206e 756d 4279 7465 7352 6561 6429 3b0a   numBytesRead);.
00000860: 2020 2020 7072 696e 7466 2822 5c6e 2229      printf("\n")
00000870: 3b0a 2020 2020 6e75 6d42 7974 6573 5265  ;.    numBytesRe
00000880: 6164 203d 2066 7265 6164 2864 6174 612c  ad = fread(data,
00000890: 2031 2c20 3136 2c20 696e 7075 7429 3b0a   1, 16, input);.
000008a0: 2020 7d0a 7d0a 0a2f 2a2a 0a20 2a20 4269    }.}../**. * Bi
000008b0: 7473 206f 7574 7075 7420 666f 7220 7878  ts output for xx
000008c0: 642e 0a20 2a0a 202a 2053 6565 206d 7978  d.. *. * See myx
000008d0: 7864 2e6d 6420 666f 7220 6465 7461 696c  xd.md for detail
000008e0: 732e 0a20 2a0a 202a 2069 6e70 7574 3a20  s.. *. * input: 
000008f0: 696e 7075 7420 7374 7265 616d 0a20 2a2a  input stream. **
00000900: 2f0a 766f 6964 2072 6561 6441 6e64 5072  /.void readAndPr
00000910: 696e 7449 6e70 7574 4173 4269 7473 2846  intInputAsBits(F
00000920: 494c 4520 2a69 6e70 7574 290a 7b0a 2020  ILE *input).{.  
00000930: 7072 696e 7466 2822 544f 444f 2033 3a20  printf("TODO 3: 
00000940: 7265 6164 416e 6450 7269 6e74 496e 7075  readAndPrintInpu
00000950: 7441 7342 6974 735c 6e22 293b 0a7d 0a0a  tAsBits\n");.}..
00000960: 696e 7420 6d61 696e 2869 6e74 2061 7267  int main(int arg
00000970: 632c 2063 6861 7220 2a2a 6172 6776 290a  c, char **argv).
00000980: 7b0a 2020 696e 7420 6269 7473 203d 2046  {.  int bits = F
00000990: 414c 5345 3b0a 2020 4649 4c45 202a 696e  ALSE;.  FILE *in
000009a0: 7075 7420 3d20 7061 7273 6543 6f6d 6d61  put = parseComma
000009b0: 6e64 4c69 6e65 2861 7267 632c 2061 7267  ndLine(argc, arg
000009c0: 762c 2026 6269 7473 293b 0a0a 2020 6966  v, &bits);..  if
000009d0: 2028 6269 7473 203d 3d20 4641 4c53 4529   (bits == FALSE)
000009e0: 0a20 207b 0a20 2020 2072 6561 6441 6e64  .  {.    readAnd
000009f0: 5072 696e 7449 6e70 7574 4173 4865 7828  PrintInputAsHex(
00000a00: 696e 7075 7429 3b0a 2020 7d0a 2020 656c  input);.  }.  el
00000a10: 7365 0a20 207b 0a20 2020 2072 6561 6441  se.  {.    readA
00000a20: 6e64 5072 696e 7449 6e70 7574 4173 4269  ndPrintInputAsBi
00000a30: 7473 2869 6e70 7574 293b 0a20 207d 0a20  ts(input);.  }. 
00000a40: 2072 6574 7572 6e20 303b 0a7d 0a          return 0;.}.
